{
  "hash": "2d572429180d72e511c61b3a0945914d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"11-tidymodels\"\nauthor: \"Professor Shannon Ellis\"\ndate: \"2024-11-12\"\n\nformat:\n  html: \n    output-file: 11-tidymodels.html\n  revealjs:\n    output-file: 11-tidymodels-slides.html\n    css: slides.css\n---\n\n::: {.cell}\n\n:::\n\n\n# `tidymodels` {background-color=\"#92A86A\"}\n\n## Suggested Reading\n\n-   Tidy Modeling with R Chapter 7: [A Model Workflow](https://www.tmwr.org/workflows)\n-   The package itself has some worked examples: https://www.tidymodels.org/start/models/\n\n## Course Announcements\n\n-   ðŸ“„ [**Final Project Proposal**](https://docs.google.com/forms/d/e/1FAIpQLSfXBztrZuK0CeB8p3YZWr6M37oe16DGazuow7_g9Ulr6AiyXg/viewform?usp=sf_link) due tonight\n-   ðŸ§ª **Lab 06** due Thursday\n-   ðŸ“‹ Lecture Participation survey \"due\" after class\n\nNote: hw03 now available; due date pushed back to Friday 11/22\n\n## Agenda\n\n- modelling (conceptually)\n- `tidymodels`\n  - inference\n  - machine learning\n- HW02 (revisited)\n\n# Modelling {background-color=\"#92A86A\"}\n\n\n## ðŸ§  Discussion\n\n1. What is a model?\n1. How are models used in inference? In machine learning? \n\n## `tidymodels`: philosophy\n\n> \"Other packages, such as caret and mlr, help to solve the R model API issue. These packages do a lot of other things too: pre-processing, model tuning, resampling, feature selection, ensembling, and so on. In the tidyverse, we strive to make our packages modular and parsnip is designed only to solve the interface issue. It is not designed to be a drop-in replacement for caret. The tidymodels package collection, which includes parsnip, has other packages for many of these tasks, and they are designed to work together. We are working towards higher-level APIs that can replicate and extend what the current model packages can do.\" - Max Kuhn (`tidymodels` developer)\n\n. . .\n\nBenefits:\n\n1.  Standardized workflow/format/notation across different types of machine learning algorithms\n2.  Can easily modify pre-processing, algorithm choice, and hyper-parameter tuning making optimization easy\n\n## `tidymodels`: ecosystem\n\nThe main packages (and their roles):\n\n<p align=\"center\">\n\n<img src=\"images/14/simpletidymodels.png\" width=\"800\"/>\n\n</p>\n\n## Inference: intro\n\nIn intro stats, you should have learned the central dogma of statistics: we sample from a population\n\n![](images/14/cdi1.png)\n\n. . .\n\nThe data from the sample are used to make an inference about the population:\n\n![](images/14/cdi2.png)\n\n\n## Inference: packages\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/07/tidymodels.png){width=98%}\n:::\n:::\n\n\n## `tidymodels`\n\nNot part of `tidyverse`; load separately\n\n::: {.cell}\n\n```{.r .cell-code}\n# should already be installed for you on datahub\nlibrary(tidymodels)\n```\n:::\n\n\n## Step 1: Specify model\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg()\n```\n:::\n\n\n## Step 2: Set model fitting *engine*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\") # lm: linear model\n```\n:::\n\n\n## Step 3: Fit model & estimate parameters\n\n... using **formula syntax**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlinear_reg() |>\n  set_engine(\"lm\") |>\n  fit(outcome ~ predictor, data = df)\n```\n:::\n\n\n## A closer look at model output\n\n$$\\widehat{outcome}_{i} = \\beta_0 + \\beta_1 \\times predictor_{i}$$\n. . . \n\n\n\n[ðŸ§  Â  How do we read/interpret this model?]{style=\"background-color: #ADD8E6\"}\n\n## Slope and intercept\n\n$$\\widehat{outcome}_{i} = \\beta_0 + \\beta_1 \\times predictor_{i}$$\n\n. . .\n\n-   **Slope:** For each additional unit increase in the predictor, we could expect the outcome, on average, to be higher, by $\\beta_1$.\n\n. . .\n\n-   **Intercept:** When the predictor is zero, we would expect the outcome to be $\\beta_0$ on average.\n\n\n## ML: intro\n\nFor prediction, we have a similar sampling problem:\n\n![](images/14/cdp1.png)\n\n. . .\n\nBut now we are trying to build a rule that can be used to predict a single observation's value of some characteristic using characteristics of the other observations.\n\n![](images/14/cdp2.png)\n\n## ML: the goal\n\nThe goal is to:\n\nbuild a machine learning algorithm\n\n. . .\n\nthat uses features as input\n\n. . .\n\nand predicts an outcome variable\n\n. . .\n\nin the situation where we do not know the outcome variable.\n\n. . . \n\n[ðŸ§  Â  Summarize/Evaluate: How is this similar/different from inference?]{style=\"background-color: #ADD8E6\"}\n\n\n## Classic ML\n\nTypically, you use data where you have both the input and output data to **train** a machine learning algorithm.\n\n. . .\n\nWhat you need:\n\n::: incremental\n1.  A data set to train from.\n2.  An algorithm or set of algorithms you can use to try values of $f$.\n3.  A distance metric $d$ for measuring how close $Y$ is to $\\hat{Y}$.\n4.  A definition of what a \"good\" distance is.\n:::\n\n## `tidymodels` for ML\n\nHow these packages fit together for carrying out machine learning:\n\n![](images/14/MachineLearning.png)\n\n## `tidymodels`: steps\n\n![](images/14/Updated_tidymodels_basics.png)\n\n# Recap {background-color=\"#92A86A\"}\n\n- Explain what models are used for\n- Describe a problem where inference would be beneficial\n- Describe a problem where machine learning would be beneficial\n- Describe the goals and overall approach to modelling in `tidymodels`\n\n\n# HW02 (revisited) {background-color=\"#92A86A\"}\n\n## Part I: Imitation\n\n## Fight Songs\n\n::: panel-tabset\n### Original\n\n![](images/11/notredame.png)\n\n### Plot (Sailor)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-5-1.png){width=100%}\n:::\n:::\n\n\n### Code (Sailor)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfight <- read_csv('data/fight-songs.csv', show_col_types = FALSE)\n \n# Calculate avg_duration and avg_bpm across fight songs for classifying\navg_duration <- mean(fight$sec_duration, na.rm = TRUE)\navg_bpm <- mean(fight$bpm, na.rm = TRUE)\n\n# Begin ggplot\nggplot(fight, aes(x = sec_duration, y = bpm)) +\n  \n  # Making sure Notre Dame is colored and referenced differently \n  geom_point(aes(color = ifelse(school == \"Notre Dame\", \"Notre Dame\", factor(school))), size = 5, alpha = 0.5) +\n  scale_color_hue() +\n  geom_vline(xintercept = avg_duration, linetype = \"dotted\", color = \"black\", size = 0.7) +\n  geom_hline(yintercept = avg_bpm, linetype = \"dotted\", color = \"black\", size = 0.7) +\n   annotate(\"text\", x = avg_duration + 5, y = 100, label = \"AVERAGE\", angle = 90, vjust = -0.5, size = 3.5)  +\n  # Adding in my labels for quadrants + AVERAGE\n  annotate(\"text\", x = 0, y = avg_bpm + 5, label = \"AVERAGE\", hjust = -0.5, size = 3.5) +\n  annotate(\"text\", x = 30, y = 190, label = \"Fast and short\", size = 4) +\n  annotate(\"text\", x = 130, y = 190, label = \"Fast but long\", size = 4) +\n  annotate(\"text\", x = 30, y = 60, label = \"Slow but short\", size = 4) +\n  annotate(\"text\", x = 130, y = 60, label = \"Slow and long\", size = 4) +\n  geom_point(aes(x = 60, y = 150), color = \"black\", size = 5) +\n  annotate(\"text\", x = 60, y = 150, label = \"Notre Dame\", vjust = -1.5, fontface = \"bold\") +\n  labs(x = \"Duration\", y = \"Beats per minute\") +\n  \n  # Scale my axis to adjust to match original \n  \n  scale_x_continuous(breaks = seq(0, 180, by = 20)) +\n  scale_y_continuous(breaks = seq(40, 200, by = 20), limits = c(40, 200)) +\n  coord_fixed(ratio = 0.8) +  \n  theme_minimal() +\n  # Theme adjusting \n  \n  theme(\n    plot.margin = margin(t = 10, r = 10, b = 10, l = 20),\n    legend.position = \"none\",\n    panel.grid.minor = element_line(color = \"grey90\", linetype = \"solid\"),\n    panel.grid.major = element_line(color = \"grey80\", linetype = \"solid\"),\n    panel.border = element_rect(color = \"black\", fill = NA))\n```\n:::\n\n\n### Plot (v2)\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-6-1.png){width=100%}\n:::\n:::\n\n\n### Code (v2)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfight_songs_data <- fight\nmean_bpm <- mean(fight_songs_data$bpm, na.rm = TRUE)\nmean_duration <- mean(fight_songs_data$sec_duration, na.rm = TRUE)\n\nggplot(fight_songs_data, aes(x = sec_duration, y = bpm)) +\n    geom_point(aes(color = school), alpha = 0.2, size = 5) +\n    geom_vline(xintercept = mean_duration, linetype = \"dotted\", color = \"black\") +\n    geom_hline(yintercept = mean_bpm, linetype = \"dotted\", color = \"black\") +\n    geom_point(data = filter(fight_songs_data, school == \"Stanford\"), \n               aes(x = sec_duration, y = bpm), \n               color = \"red\", size = 5, shape = 21, fill = \"red\") +\n    geom_text(data = filter(fight_songs_data, school == \"Stanford\"), \n              aes(x = sec_duration, y = bpm, label = \"Stanford\", fontface = \"bold\", family = \"Arial\"), \n              vjust = -1, color = \"black\", size = 4) +\n    labs(\n        title = \"How Stanford's Fight Song stacks up\",\n        x = \"Duration\",\n        y = \"Beats per minute\"\n    ) +\n    scale_y_continuous(breaks = seq(60, 200, by = 20),\n                       labels = c(\"60\", \"80\", \"100\", \"120\", \"140\", \"160\", \"180\", \"200bpm\"),\n                       limits = c(60, 200)) +\n    scale_x_continuous(breaks = seq(0, 180, by = 20), \n                       labels = c(\"0 sec\", \"20\", \"40\", \"60\", \"80\", \"100\", \"120\", \"140\", \"160\", \"180\")) +\n    annotate(\"text\", x = 10, y = 190, label = \"Fast and short\", size = 4, hjust = 0, family = \"Courier\") +\n    annotate(\"text\", x = 10, y = 70, label = \"Slow but short\", size = 4, hjust = 0, family = \"Courier\") +\n    annotate(\"text\", x = 140, y = 190, label = \"Fast but long\", size = 4, hjust = 1, family = \"Courier\") +\n    annotate(\"text\", x = 140, y = 70, label = \"Slow and long\", size = 4, hjust = 1, family = \"Courier\") +\n    annotate(\"text\", x = max(fight_songs_data$sec_duration) - 20, y = mean_bpm, \n             label = \"AVERAGE\", vjust = 0.5, hjust = -0.1, color = \"black\", size = 3, family = \"Arial\") +\n    theme_minimal() +\n    theme(\n        legend.position = \"none\",\n        plot.title = element_text(hjust = 0.5, face = \"bold\", family = \"Arial\"),\n        panel.grid.major = element_line(size = 0.5),\n        panel.grid.minor = element_blank()\n    )\n```\n:::\n\n\n:::\n\n## Hate Crimes (Adam)\n\n::: panel-tabset\n### Original\n\n![alt text](https://fivethirtyeight.com/wp-content/uploads/2017/01/majumder-hate-crimes-corrected.png)\n\n### Plot \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-7-1.png){width=100%}\n:::\n\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-7-2.png){width=100%}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load data\nurl <- \"https://raw.githubusercontent.com/fivethirtyeight/data/master/hate-crimes/hate_crimes.csv\"\nhate_crimes <- read_csv(url)\n\nstates_map <- map_data(\"state\")\nhate_crimes <- hate_crimes |>\n  mutate(state = tolower(state)) \n\nmap_data <- states_map |>\n  left_join(hate_crimes, by = c(\"region\" = \"state\"))\n\n\n#Graph Numero Uno\n\nggplot(map_data, aes(x = long, y = lat, group = group, fill = avg_hatecrimes_per_100k_fbi)) +\n  geom_polygon(color = \"white\") +\n  scale_fill_gradient(low = \"#ffe4d0\", high = \"#ba3900\", na.value = \"gray\", name = \"Hate Crimes\\nper 100k\") +\n  labs(title = \"PRE-ELECTION HATE CRIME RATES POST-ELECTION\",\n       subtitle = \"Average annual hate crimes per 100,000 residents, 2010-15\") +\n  theme_minimal() +\n  theme(    axis.text.x = element_blank(),\n    plot.title = element_text(face = 'bold'),\n    axis.ticks.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"top\", \n    legend.title = element_text(size=6),\n    \n  ) +\n  coord_fixed(1.3) #Unstretch\n```\n\n```{.r .cell-code}\n#Second Graph\nggplot(map_data, aes(x = long, y = lat, group = group, fill = hate_crimes_per_100k_splc)) +\n  geom_polygon(color = \"white\") +\n  scale_fill_gradient(low = \"#b0e2c8\", high = \"#006646\", na.value = \"gray\", name = \"Hate Crimes\\nper 100k\") +\n  labs(title = \"POST-ELECTION HATE CRIME RATES POST-ELECTION\",\n       subtitle = \"Average annual hate crimes per 100,000 residents, 2010-15\") +\n  theme_minimal() +\n  theme(    axis.text.x = element_blank(),\n    plot.title = element_text(face = 'bold'),\n    axis.ticks.x = element_blank(),\n    axis.text.y = element_blank(),\n    axis.ticks.y = element_blank(),\n    axis.title.x = element_blank(),\n    axis.title.y = element_blank(),\n    panel.grid = element_blank(),\n    legend.position = \"top\", \n    legend.title = element_text(size=6),\n    \n  ) +\n  coord_fixed(1.3) #Unstretch\n```\n:::\n\n:::\n\n\n## Congress Age\n\n::: panel-tabset\n### Original\n\n![Median Age of Congress](images/11/congress.png)\n\n### Plot \n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-8-1.png){width=100%}\n:::\n:::\n\n\n### Code \n\n\n::: {.cell}\n\n```{.r .cell-code}\ncongress_data = read_csv(\"data/data_aging_congress.csv\")\n\ncongress_data <- congress_data |>\n  mutate(year = as.numeric(format(start_date, \"%Y\")))  #Extracted year from start_date\n\n#Grouping Congress by session to calculate median age\ncongress_median_age <- congress_data |>\n  group_by(congress, year, chamber) |>\n  summarise(median_age = median(age_years, na.rm = TRUE)) |>\n  ungroup()\n\nggplot(congress_median_age, aes(x = year, y = median_age, color = chamber)) +\n  geom_step(linewidth = 1) +  \n  #Senate\n  geom_text(data = congress_median_age |> \n              filter(chamber == \"Senate\", year == 2023),  \n            aes(label = \"65.3\"), \n            hjust = -0.2, vjust = +0.3, size = 3, color = \"black\", show.legend = FALSE) + \n  #House\n  geom_text(data = congress_median_age |> \n              filter(chamber == \"House\", year == 2023), \n            aes(label = \"57.8\"), \n            hjust = -0.2, vjust = -0.5, size = 3, color = \"black\", show.legend = FALSE) +\n  #Titles\n  labs(title = \"Median Age of the U.S. Senate and House by Congress, 1919 to 2023\",\n       subtitle = \"The House and Senate are older than ever before\",\n       x = \"Year\",\n       y = \"Median Age\",\n       color = \"Chamber\") +  \n    scale_color_manual(values = c(\"Senate\" = \"#5b41d1\", \"House\" = \"#55aa5c\"))+\n  #Scaling both axis\n  scale_x_continuous(limits = c(min(congress_median_age$year), max(congress_median_age$year)), breaks = seq(1920, 2020, by =  10)) +\n  scale_y_continuous(limits = c(45, NA)) +\n  theme_minimal() +  \n  theme(plot.title = element_text(face = \"bold\", size = 14),  \n        plot.subtitle = element_text(size = 10),\n        axis.title = element_text(size = 12),\n        legend.position = \"top\",\n        aspect.ratio = 1/4,\n        panel.grid.major.x = element_blank(),\n        panel.grid.minor.x = element_blank(),\n        panel.grid.minor.y = element_blank())\n```\n:::\n\n:::\n\n## Part II: Sad Plot\n\n\n## Votes\n::: panel-tabset\n### Original\n\n![](images/11/sad_graph.png)\n\n### Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-9-1.png){width=100%}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# estimate data\nd <- data.frame(\n  area = rep(c('Rural', 'Suburban', 'Urban'), each = 2),\n  voted = rep(c('Biden', 'Trump'), times = 3),\n  percentages = c(35, 65, 55, 45, 70, 30)\n)\n\n# plot\n\nggplot(d, aes(x = area, y = percentages, fill = voted)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(\n    title = \"Votes for Trump and Biden in 2020 Election Based on Location\",\n    x = \"Location\",\n    y = \"Percentage of Votes\",\n    fill = \"Candidate\"  # Legend title\n  ) +\n  scale_y_continuous(breaks = seq(0, 100, by = 10), limits = c(0, 80)) +\n  theme_minimal() +\n  scale_fill_manual(values = c(\"#0033A0\", \"#C8102E\"))  # Custom colors for groups\n```\n:::\n\n:::\n\n## CS01 Data (Sandy)\n\n::: panel-tabset\n### Original\n\n![](images/11/sad_lecture_plot.jpeg)\n\n### Plot\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](11-tidymodels_files/figure-html/unnamed-chunk-10-1.png){width=100%}\n:::\n:::\n\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWB <- read_csv(\"https://github.com/ShanEllis/datasets/raw/refs/heads/master/Blood.csv\")\n\nWB <- WB |> \n  mutate(Treatment = fct_recode(Treatment, \n                                \"5.9% THC (low dose)\" = \"5.90%\",\n                                \"13.4% THC (high dose)\" = \"13.40%\"),\n         Treatment = fct_relevel(Treatment, \"Placebo\", \"5.9% THC (low dose)\"),\n         Group = fct_recode(Group,\n                            \"Frequent User\" = \"Frequent user\",\n                            \"Occasional User\" = \"Occasional user\")) |> \n  janitor::clean_names() |>\n  rename(thcoh = x11_oh_thc,\n         thccooh = thc_cooh,\n         thccooh_gluc = thc_cooh_gluc,\n         thcv = thc_v) |>\n  mutate(timepoint = case_when(time_from_start < 0 ~ \"pre-smoking\",\n                               time_from_start > 0 & time_from_start <= 30 ~ \"0-30 min\",\n                               time_from_start > 30 & time_from_start <= 70 ~ \"31-70 min\",\n                               time_from_start > 70 & time_from_start <= 100 ~ \"71-100 min\",\n                               time_from_start > 100 & time_from_start <= 180 ~ \"101-180 min\",\n                               time_from_start > 180 & time_from_start <= 210 ~ \"181-210 min\",\n                               time_from_start > 210 & time_from_start <= 240 ~ \"211-240 min\",\n                               time_from_start > 240 & time_from_start <= 270 ~ \"241-270 min\",\n                               time_from_start > 270 & time_from_start <= 300 ~ \"271-300 min\",\n                               time_from_start > 300 ~ \"301+ min\"))\n\nWB |>\n  ggplot(mapping = aes(x = time_from_start,\n                       y = thccooh,\n                       color = group)) +\n  geom_point(size = 3) +\n  labs(x = \"Time After Smoking (Minutes)\", y = \"THCCOOH\", \n       title = \"Change in THCCOOH Levels After Smoking\",\n       subtitle = \"Levels measured over time for frequent and occasional users\",\n       color = \"Group\") +\n  theme(plot.title = element_text(size = 20, hjust = 0, vjust = 2),\n        plot.subtitle = element_text(size = 16, hjust = 0, vjust = 1)) +\n  scale_color_manual(values = c(\"Frequent User\" = \"#fc8d59\",\n                                \"Occasional User\" = \"#91bfdb\")) +\n  theme_minimal()\n```\n:::\n\n:::\n",
    "supporting": [
      "11-tidymodels_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}