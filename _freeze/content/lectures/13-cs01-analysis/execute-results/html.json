{
  "hash": "ce4343c3ded87c2aea462c2879792412",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"13-cs01-analysis\"\nauthor: \"Professor Shannon Ellis\"\ndate: \"2023-11-14\"\n\nformat:\n  html: \n    output-file: 13-cs01-analysis.html\n    embed-resources: true\n  revealjs:\n    output-file: 13-cs01-analysis-slides.html\n    slide-number: true\n    chalkboard: false \n    preview-links: auto\n    logo: images/cogs137-logo-hex.png\n    css: slides.css\n    footer: <https://cogs137.github.io/website/>\n    scrollable: true\n    embed-resources: true\n    execute:\n      echo: true\n      eval: true\n---\n\n::: {.cell}\n\n:::\n\n\n# CS01: Biomarkers of Recent Use (Analysis) {background-color=\"#92A86A\"}\n\n## Q&A {.smaller}\n\n> Q: How extensive does our extension component need to be?\\\n> A: A bit hard to answer in certain terms. We'll discuss some examples today to hopefully set expectaions well. To explain in writing here, the most typical extension is students using the data provided to ask and answer a question not directly presented in class. Thus, simply generating a visualization not presented in class would NOT be sufficient. At the other end, finding external data on the topic and analyzing that data, while certainly allowed, would far exceed expectations. In between those extremes is what we expect: add significantly to the analysis, beyond what was presented in class.\n\n\n## Course Announcements\n\nDue Dates:\n\n- **HW03** (MLR) due Mon 11/20\n- **Project Proposal** (it will be a Google Form) due 11/20\n- **CS01** Deadlines:\n  - **Lab06** due Friday - cs01-focused\n  - Report & \"General Communication\" due 11/27\n  - survey about how working with group went - due 11/28\n\n. . .\n\nNotes:\n\nMidterm scores & Feedback posted\n\n- overall, did very well\n  - avg: 13.85/15 (92%)\n  - 6 perfect scores\n- answer key on course website\n\nI am behind on emails and Piazza posts.\n\n## Mid-course Survey Summary \n\n- N=73 (~75%)\n- Pacing workload (so far) about right\n- Course notes most helpful in the course overall\n- Also helpful: completing labs, doing homework,\n- Many are not checking labs against answer keys; most are not doing suggested readings\n- Of those that attend lecture, most find it helpful\n\n## Mid-course: Time Spent\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-1-1.png){width=2100}\n:::\n:::\n\n\n## Mid-course: What would you change?\n  \n\n::: {.cell}\n::: {.cell-output-display}\n\n```{=html}\n<div class=\"datatables html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-7855f2c00fd9e8d346c6\" style=\"width:100%;height:auto;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-7855f2c00fd9e8d346c6\">{\"x\":{\"filter\":\"none\",\"vertical\":false,\"data\":[[\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"10\",\"11\",\"12\",\"13\",\"14\",\"15\",\"16\",\"17\",\"18\"],[\"Make labs due on Sunday at 11:59 pm instead of Friday ad 11:59 pm.\",\"The amount of work in labs.\",\"Only thing I might change a tiny bit is add some more examples in lecture, but also add more diverse examples. So maybe more use cases, different data sets, multiple popular approaches etc.\",\"It might be that it's just me, but I felt like R lacks the extensive and comprehensive resource base like Java and Python have. It was a bit of a journey to search for methods and parameters to apply. So, I think it might be helpful to direct to some more resources for R. (I might be just totally missing out on the resources, and if that's the case, please ignore me.)\",\"I may try flipped class.\",\"The pacing of material and assignments feel pretty overwhelming.\",\"I would use some other platform such as slack or discord as well, which could be easier for students to exchange contact for case studies and the final\",\"I would like more drop-in office hour times since I have class right after lecture :(\",\"I feel like shorter more frequent lectures (1h lecture 3 times a week, for example) might be helpful. The lectures are pretty mentally demanding and I start zoning out at around the 1h mark\",\"I think having pre-recorded videos that go over basics of each concept (ggplot, linear models, etc.) so we can refer to them later when working on homework/labs/case studies instead of trying to find them in the podcasts would be helpful!\",\"I would have more exercises that ask us to duplicate existing visuals. Reverse engineering the visuals has allowed me to gain a better understanding of R and how to manipulate the data and use the aesthetics.\",\"Better lab structure\",\"The labs being graded on how much if it we did. because it makes me actually wanna learn the content\",\"Lab structure.  I feel like we spend 25 minutes doing 1 question and then we only have 20 minutes left to do the rest in lab.\",\"Although the lecture slides are helpful, I wish we were given little tasks during lecture that students could try experimenting with. Slides could give hints with how to approach / solve these \\\"tasks\\\", and answers to these tasks could be released one week prior to the midterm. This would help students be more engaged during lecture.\",\"Maybe more class time/practice with hands-on R coding during class time, and maybe some extra resources to help with syntax.\",\"have more labs per week\",\"I wish attendance wasn't extra credit. The EC should be granted if people can view the lectures and not just attend the lecture.\"]],\"container\":\"<table class=\\\"display\\\">\\n  <thead>\\n    <tr>\\n      <th> <\\/th>\\n      <th>Optional: If you were in charge and could change one thing about COGS 137, what would it be?<\\/th>\\n    <\\/tr>\\n  <\\/thead>\\n<\\/table>\",\"options\":{\"columnDefs\":[{\"orderable\":false,\"targets\":0}],\"order\":[],\"autoWidth\":false,\"orderClasses\":false}},\"evals\":[],\"jsHooks\":[]}</script>\n```\n\n:::\n:::\n\n  \n## Agenda\n\n- Debugging/Understanding Code Strategies\n- Sensitivity & Specificity\n- Cross-compound correlations\n- Extensions\n\n## Summary: Figuring out what's going on in code\n\nSuggestions (as discussed in class):\n\n:::incremental\n1. Look up documentation (i.e. `?...`) / Google the function\n2. Run it on different input; see how output changing\n3. Run the code line-by-line, understanding output at each step \n4. Ask ChatGPT\n:::\n\n# Question {background-color=\"#92A86A\"}\n\nWhich compound, in which matrix, and at what cutoff is the best biomarker of recent use?\n\n. . .\n\n::: callout-message\nEvery group will answer this question.\n:::\n\n# Data & Files {background-color=\"#92A86A\"}\n\n## Packages\n\nThree additional packages required for these notes:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(purrr)\nlibrary(rstatix)\nlibrary(cowplot)\n```\n:::\n\n\n## The Data\n\nReading in the data from the end of data wrangling notes: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nload(\"data/compounds.RData\")\nload(\"data/timepoints.RData\")\nload(\"data/data_clean.RData\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\nAnd the functions...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsource(\"src/cs01_functions.R\")\n```\n:::\n\n\n# Analysis {background-color=\"#92A86A\"}\n\n\n## Sensitivity & Specificity\n\n**Sensitivity** | the ability of a test to correctly identify patients with a disease/trait/condition. $$TP/(TP + FN)$$\n\n. . .\n\n**Specificity** | the ability of a test to correctly identify people without the disease/trait/condition. $$TN/(TN + FP)$$\n\n. . . \n\n[❓ For this analysis, do you care more about sensitivity? about specificity? equally about both?]{style=\"background-color: #ADD8E6\"}\n\n## What is a TP here? TN? FP? FN? \n\n**Post-smoking** (cutoff > 0)\n\n:::incremental\n- TP = THC group, value >= cutoff\n- FN = THC group, value < cutoff\n- FP = Placebo group, value >= cutoff\n- TN = Placebo group, value < cutoff\n:::\n\n. . .\n\n**Post-smoking** (cutoff == 0)\n\nCannot be a TP or FP if zero...\n\n- TP = THC group, value > cutoff),\n- FN = THC group, value <= cutoff),\n- FP = Placebo group, value > cutoff),\n- TN = Placebo group, value < cutoff)\n\n. . . \n\n**Pre-smoking** \n\nCannot be a TP or FN before consuming...\n\n- TP = 0\n- FN = 0\n- FP = value >= cutoff\n- TN = value < cutoff\n\n## ROC\n\nReceiver-Operator Characteristic (ROC) Curve: TPR (Sensitivity) vs FPR (1-Specificity)\n\n![](images/13/Roc_curve.svg.png)\n\nImage Credit: By cmglee, MartinThoma - Roc-draft-xkcd-style.svg, CC BY-SA 4.0, https://commons.wikimedia.org/w/index.php?curid=109730045\n\n\n\n\n## Calculating Sensitivity and Specificity\n\n:::panel-tabset\n\n### Calculate \n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_calculations <- function(dataset, dataset_removedups, split, compound, \n                              start = start, stop = stop, tpt_use = tpt_use){\n  ## remove NAs\n  df <- dataset_removedups %>% \n    dplyr::select(treatment, compound, timepoint_use) %>%\n    rename(compound = 2) %>%\n    filter(complete.cases(.))\n  if(nrow(df)>0){\n    if(stop <= 0){\n      output <- df %>% \n        summarise(TP = 0,\n                  FN = 0,\n                  FP = sum(compound >= split),\n                  TN = sum(compound < split)) \n    }else{\n      if(split == 0){\n        output_pre <- df %>% \n          filter(tpt_use == \"pre-smoking\") %>%\n          summarise(TP = 0,\n                    FN = 0,\n                    FP = sum(compound >= split),\n                    TN = sum(compound < split)) \n        \n        output <- df %>% \n          filter(tpt_use != \"pre-smoking\") %>%\n          summarise(TP = sum(treatment != \"Placebo\" & compound > split),\n                    FN = sum(treatment != \"Placebo\" & compound <= split),\n                    FP = sum(treatment == \"Placebo\" & compound > split),\n                    TN = sum(treatment == \"Placebo\" & compound < split))\n        \n        output <- output + output_pre\n      }else{\n        ## calculate values if pre-smoking\n        output_pre <- df %>% \n          filter(tpt_use == \"pre-smoking\") %>%\n          summarise(TP = 0,\n                    FN = 0,\n                    FP = sum(compound >= split),\n                    TN = sum(compound < split)) \n        \n        output <- df %>% \n          filter(tpt_use != \"pre-smoking\") %>%\n          summarise(TP = sum(treatment != \"Placebo\" & compound >= split),\n                    FN = sum(treatment != \"Placebo\" & compound < split),\n                    FP = sum(treatment == \"Placebo\" & compound >= split),\n                    TN = sum(treatment == \"Placebo\" & compound < split))\n        \n        output <- output + output_pre\n      }\n    }\n  }\n  # clean things up; make calculations on above values\n  output <- output %>%\n    mutate(detection_limit = split,\n           compound = compound,\n           time_start = start,\n           time_stop = stop,\n           time_window = tpt_use,\n           NAs = nrow(dataset) - nrow(df),\n           N = nrow(dataset_removedups),\n           N_removed = nrow(dataset) - nrow(dataset_removedups),\n           Sensitivity = (TP/(TP + FN)), \n           Specificity = (TN /(TN + FP)),\n           PPV = (TP/(TP+FP)),\n           NPV = (TN/(TN + FN)),\n           Efficiency = ((TP + TN)/(TP + TN + FP + FN))*100\n    )\n  \n  return(output)\n}\n```\n:::\n\n\n### Run\n\n- determine what cutoff values to try\n- carry out above function on those cutoffs\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsens_spec <- function(dataset, compound, start, stop, tpt_use, \n                      lowest_value = 0.5, splits = NULL, ...){\n  # if it's not all NAs...\n  if(sum(is.na(dataset[,compound])) != nrow(dataset)){\n    # specify what splits should be used for calculations\n    if(is.null(splits)){\n      limits <- dataset[is.finite(rowSums(dataset[,compound])),compound]\n      ## define lower and upper limits\n      lower = min(limits, na.rm=TRUE)\n      upper = max(limits, na.rm=TRUE)\n      ## determine splits to use for calculations\n      tosplit = pull(limits[,1])[limits[,1]>0]\n      ## only split if there are detectable limits:\n      if(length(tosplit)>=1){\n        splits = c(lowest_value, quantile(tosplit, probs=seq(0, 1, by = 0.01), na.rm=TRUE))\n        splits = unique(splits)\n      }else{\n        splits = 0\n      }\n    }else{\n      splits = splits\n    }\n    # filter to include timepoint of interest\n    dataset <- dataset %>% \n      filter(time_from_start > start & time_from_start <= stop & !is.na(timepoint_use))\n    dataset_removedups <- dataset %>%\n      filter(!is.na(timepoint_use)) %>% \n      group_by(timepoint_use) %>% \n      distinct(id, .keep_all = TRUE) %>% \n      ungroup()\n\n    ## create empty output variable which we'll fill in\n    ## iterate through each possible dose and calculate\n    output <- map_dfr(as.list(splits), ~make_calculations(dataset, \n                                                          dataset_removedups, \n                                                          split = .x,\n                                                          compound,\n                                                          start = start,\n                                                          stop = stop, \n                                                          tpt_use = tpt_use))\n  }\n  \n  return(output)\n}\n```\n:::\n\n\n### Apply\n\nMap the above for each matrix...\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsens_spec_cpd <- function(dataset, cpd, timepoints, splits = NULL){\n  args2 <- list(start = timepoints$start, \n                stop = timepoints$stop, \n                tpt_use = timepoints$timepoint)\n  out <- args2 %>% \n    pmap_dfr(sens_spec, dataset, compound = cpd, splits = splits)\n  return(out)\n}\n```\n:::\n\n\n### Do it!\n\nThis takes a few minutes to run... (reminder: `cache=TRUE`)\n\n\n::: {.cell}\n\n```{.r .cell-code}\noutput_WB <- map_dfr(compounds_WB, \n                     ~sens_spec_cpd(dataset = WB, cpd = all_of(.x), \n                                    timepoints = timepoints_WB)) %>% clean_gluc()\n\noutput_BR <- map_dfr(compounds_BR, \n                     ~sens_spec_cpd(dataset = BR,  cpd = all_of(.x),\n                                    timepoints = timepoints_BR))  %>% clean_gluc()\n\noutput_OF <- map_dfr(compounds_OF, \n                     ~sens_spec_cpd(dataset = OF, cpd = all_of(.x),\n                                    timepoints = timepoints_OF))  %>% clean_gluc()\n```\n:::\n\n\n::: \n\n## ROC \n\n:::panel-tabset\n\n### Code\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss_plot <- function(output, tpts=8, tissue){\n  to_include = output %>%\n    group_by(compound) %>% \n    summarize(mean_detection = mean(detection_limit)) %>% \n    filter(mean_detection > 0)\n  \n  output <-  output %>% \n    mutate(iszero = ifelse(time_start<0,TRUE,FALSE),\n           Sensitivity = round(Sensitivity*100,0),\n           Specificity = round(Specificity*100,0)) %>%\n    filter(compound %in% to_include$compound,\n           time_window != \"pre-smoking\") %>%\n    clean_gluc() %>% \n    mutate(compound = fct_relevel(as.factor(compound), \"THC\"))\n  \n  output <- output %>%  mutate(\n    legend = paste0(time_window,' (N=', N,')'))\n  \n  blue_colors = c('#C2F8FF', '#A2DDED', '#86BEDC', '#6C9FCA', \n                  '#547EB9', '#3F5EA8', '#2D4096', '#1E2385',\n                  '#181173', '#180762', '#180051')\n  values = c(blue_colors[1:tpts])\n  \n  print(ggplot(output, aes(x = detection_limit, y = Sensitivity, group = fct_inorder(legend))) + \n          geom_point(aes(color=fct_inorder(legend)), size = 0.9, show.legend = FALSE) +\n          geom_path(aes(color=fct_inorder(legend)), size=1.2) + \n          facet_grid(~compound, scales = \"free_x\") +\n          labs(x = 'Detection Limit',\n               y = 'Sensitivity') +\n          ylim(0,1) +\n          scale_color_manual(values = values, name = 'Time Window') +\n          theme_classic(base_size = 12) + \n          theme(axis.title = element_text(size=16), \n                panel.grid = element_blank(),\n                strip.background = element_blank(),\n                strip.text.x = element_text(size = 12))  \n  )\n  print(\n    ggplot(output, aes(x = detection_limit, y = Specificity, group = fct_inorder(legend))) + \n      geom_point(aes(color=fct_inorder(legend)), size = 0.9, show.legend = FALSE) +\n      geom_path(aes(color=fct_inorder(legend)), size=1.2) + \n      facet_grid(~compound, scales = \"free_x\") +\n      ylim(0,100) +\n      labs(title = tissue,\n           x = 'Detection Limit',\n           y = 'Specificity') +\n      scale_color_manual(values = values, name = 'Time Window') +\n      theme_classic(base_size = 12) + \n      theme(axis.title = element_text(size=16),\n            panel.grid = element_blank(),\n            strip.background = element_blank(),\n            strip.text.x = element_text(size = 12))\n  )\n  print(\n    ggplot(output, aes(x=(100-Specificity), y = Sensitivity, group = fct_inorder(legend))) +\n      geom_point(aes(color=fct_inorder(legend)), size = 0.9, show.legend = FALSE) +\n      geom_path(aes(color=fct_inorder(legend)), size=1.2) + \n      facet_grid(~compound) +\n      xlim(0, 100) +\n      ylim(0, 100) +\n      labs(title = tissue,\n           x = '(100-Specificity)',\n           y = 'Sensitivity') +\n      scale_color_manual(values = values, name = 'Time Window') +\n      theme_classic(base_size = 12) + \n      theme(axis.title = element_text(size=16),\n            panel.grid = element_blank(),\n            strip.background = element_blank(),\n            strip.text.x = element_text(size = 12),\n            axis.text = element_text(size=12))\n  )\n}\n\nroc_plot <- function(output, tpts=8, tissue){\n  to_include = output %>%\n    group_by(compound) %>% \n    summarize(mean_detection = mean(detection_limit)) %>% \n    filter(mean_detection > 0)\n  \n  output <-  output %>% \n    mutate(iszero = ifelse(time_start<0,TRUE,FALSE),\n           Sensitivity = round(Sensitivity*100,0),\n           Specificity = round(Specificity*100,0)) %>%\n    filter(compound %in% to_include$compound,\n           time_window != \"pre-smoking\") %>%\n    clean_gluc() %>% \n    mutate(compound = fct_relevel(as.factor(compound), \"THC\"))\n  \n  output <- output %>% mutate(\n    legend = paste0(time_window,' (N=', N,')'))\n  \n  blue_colors = c('#C2F8FF', '#86BEDC', \n                  '#547EB9', '#2D4096',\n                  '#181173', '#180051')\n  values = c(blue_colors[1:tpts])\n  print(\n    ggplot(output, aes(x=(100-Specificity), y = Sensitivity, group = fct_inorder(legend))) +\n      geom_point(aes(color=fct_inorder(legend)), size = 0.9, show.legend = FALSE) +\n      geom_path(aes(color=fct_inorder(legend)), size=1.2) + \n      facet_grid(~compound) +\n      xlim(0, 100) +\n      ylim(0, 100) +\n      labs(title = tissue,\n           x = '(100-Specificity)',\n           y = 'Sensitivity') +\n      scale_color_manual(values = values, name = 'Time Window') +\n      theme_classic(base_size = 12) + \n      theme(axis.title = element_text(size=16),\n            panel.grid = element_blank(),\n            strip.background = element_blank(),\n            strip.text.x = element_text(size = 12),\n            axis.text = element_text(size=12) )\n  )\n}\n```\n:::\n\n\n### Calculate\n\n\n::: {.cell}\n\n```{.r .cell-code}\nss1_a <- ss_plot(output_WB, tpts = length(unique(output_WB$time_start)), tissue = \"Blood\")\n```\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-1.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-2.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-3.png){width=2100}\n:::\n\n```{.r .cell-code}\nss2_a <- ss_plot(output_OF, tpts = length(unique(output_OF$time_start)), tissue = \"Oral Fluid\")\n```\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-4.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-5.png){width=2100}\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-6.png){width=2100}\n:::\n\n```{.r .cell-code}\nss3_a <- roc_plot(output_BR, tpts = length(unique(output_BR$time_start)), tissue = \"Breath\")\n```\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-12-7.png){width=2100}\n:::\n:::\n\n\n### Plot\n\n::: {.cell}\n\n```{.r .cell-code}\nbottom_row <- plot_grid(ss2_a, ss3_a, labels = c('B', 'C'), label_size = 12, ncol = 2, rel_widths = c(0.66, .33))\nplot_grid(ss1_a, bottom_row, labels = c('A', ''), label_size = 12, ncol = 1)\n```\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-13-1.png){width=2100}\n:::\n:::\n\n\n:::\n\n## Calculate: THC\n\nReminder: Currently, states have laws on the books from zero tolerance (detection of any level) to 5ng/mL\n\n:::panel-tabset\n\n### WB\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncutoffs = c(0.5, 1, 2, 5, 10)\nWB_THC <- sens_spec_cpd(dataset = WB, cpd = 'thc',\n                        timepoints = timepoints_WB,\n                        splits = cutoffs) %>% clean_gluc()\n\nWB_THC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 × 17\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int>           <dbl> <chr>         <dbl>     <dbl>\n 1     0     0    81   108             0.5 THC            -400         0\n 2     0     0    61   128             1   THC            -400         0\n 3     0     0    45   144             2   THC            -400         0\n 4     0     0    10   179             5   THC            -400         0\n 5     0     0     1   188            10   THC            -400         0\n 6   124     2    28    33             0.5 THC               0        30\n 7   123     3    22    39             1   THC               0        30\n 8   119     7    15    46             2   THC               0        30\n 9   106    20     4    57             5   THC               0        30\n10   101    25     0    61            10   THC               0        30\n# ℹ 40 more rows\n# ℹ 9 more variables: time_window <chr>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>\n```\n\n\n:::\n:::\n\n\n### OF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOF_THC <- sens_spec_cpd(dataset = OF, cpd = 'thc',\n                        timepoints = timepoints_OF,\n                        splits = cutoffs) %>% clean_gluc()\n\nOF_THC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 40 × 17\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int>           <dbl> <chr>         <dbl>     <dbl>\n 1     0     0    35   157             0.5 THC            -400         0\n 2     0     0    20   172             1   THC            -400         0\n 3     0     0     9   183             2   THC            -400         0\n 4     0     0     0   192             5   THC            -400         0\n 5     0     0     0   192            10   THC            -400         0\n 6   129     0    39    24             0.5 THC               0        30\n 7   129     0    30    33             1   THC               0        30\n 8   128     1    19    44             2   THC               0        30\n 9   128     1     3    60             5   THC               0        30\n10   125     4     1    62            10   THC               0        30\n# ℹ 30 more rows\n# ℹ 9 more variables: time_window <chr>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>\n```\n\n\n:::\n:::\n\n\n### BR\n\nWhy is there no calculation for breath with these cutoffs?\n\n:::\n\n## Cutoffs\n\n:::panel-tabset\n\n### Code\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_cutoffs <- function(dataset, timepoint_use_variable, tissue, labels = c(\"A\", \"B\"), vertline, cpd, x_labels){\n    col_val = c(\"#D9D9D9\", \"#BDBDBD\", \"#969696\", \"#636363\", \"#252525\")\n    lines = rep(\"solid\", 5)\n    \n  df_ss <- dataset %>% \n    mutate(time_window = fct_relevel(as.factor(time_window), \n                                     levels(timepoint_use_variable)),\n           detection_limit = as.factor(detection_limit),\n           Sensitivity =  round(Sensitivity*100,0),\n           Specificity =  round(Specificity*100,0),\n           my_label = paste0(time_window, ' N=', N),\n           my_label =  gsub(\" \", \"\\n\", my_label),\n           my_label = fct_relevel(as.factor(my_label), x_labels)) #%>%          \n    \n    p1 <- df_ss %>% \n    ggplot(aes(x = my_label, y = Sensitivity, \n               colour = detection_limit)) + \n    geom_line(size = 1.2, aes(group = detection_limit, \n                              linetype = detection_limit)) + \n    geom_vline(xintercept=vertline, linetype = 'dotted') +\n    geom_point(show.legend=FALSE) + \n    ylim(0,100) +\n    scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +\n    scale_linetype_manual(values=lines) +\n      scale_color_manual(values = col_val, name = \"Cutoff \\n (ng/mL)\",\n                         guide = guide_legend(override.aes = list(linetype = c(1),\n                                                                  shape = rep(NA, length(lines))) )) +\n    theme_classic() +\n    theme( axis.title = element_text(size=16),\n           axis.text = element_text(size=10),\n           legend.position = c(0.08, 0.4),\n           panel.grid = element_blank(),\n           strip.background = element_blank()\n           ) +\n      guides(linetype = FALSE) +\n    labs(x = \"Time Window\", \n         y = \"Sensitivity\", \n         title = paste0(tissue,\": \", cpd) )\n \n  p2 <- df_ss %>% \n    ggplot(aes(x = my_label, y = Specificity,\n               group = detection_limit, \n               colour = detection_limit, \n               linetype = detection_limit)) + \n    geom_line(size = 1.2) +\n    geom_vline(xintercept=vertline, linetype = 'dotted') +\n    geom_point() + \n    ylim(0,100) +\n    scale_color_manual(values = col_val) +\n    scale_x_discrete(labels = function(x) str_wrap(x, width = 5)) +\n    scale_linetype_manual(values = lines, \n                          guide = guide_legend(override.aes = list(linetype = \"solid\",\n                                                                   shape = rep(NA, length(lines))) )) +\n    theme_classic() +\n    theme(axis.title = element_text(size=16),\n          axis.text = element_text(size=10),\n          legend.position = \"none\", \n          panel.grid = element_blank(),\n          strip.background = element_blank()) +\n    labs(x = \"Time Window\", \n         y = \"Specificity\",\n         title = \"\" )\n  \n  title <- ggdraw() + \n    draw_label(\n      tissue,\n      x = 0.05,\n      hjust = 0\n    )\n  \n  plot_row <- plot_grid(p1, p2, labels = labels, label_size = 12)\n  \n  plot_grid(\n    title, plot_row,\n    ncol = 1,\n    # rel_heights values control vertical title margins\n    rel_heights = c(0.1, 1)\n  )\n  \n  return(list(plot_row, df_ss))\n\n}\n```\n:::\n\n\n### WB\n\n\n::: {.cell}\n\n```{.r .cell-code}\nblood_levels <- c(\"pre-smoking\\nN=189\", \"0-30\\nmin\\nN=187\", \"31-70\\nmin\\nN=165\",\n                  \"71-100\\nmin\\nN=157\", \"101-180\\nmin\\nN=168\", \"181-210\\nmin\\nN=103\",\n                  \"211-240\\nmin\\nN=127\", \"241-270\\nmin\\nN=137\", \"271-300\\nmin\\nN=120\",\n                  \"301+\\nmin\\nN=88\")\n\nplot_cutoffs(dataset=WB_THC, \n             timepoint_use_variable=WB$timepoint_use, \n             tissue=\"Blood\", \n             vertline=levels(WB$timepoint_use)[5], \n             cpd=\"THC\", \n             x_labels=blood_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-17-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n# A tibble: 50 × 18\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int> <fct>           <chr>         <dbl>     <dbl>\n 1     0     0    81   108 0.5             THC            -400         0\n 2     0     0    61   128 1               THC            -400         0\n 3     0     0    45   144 2               THC            -400         0\n 4     0     0    10   179 5               THC            -400         0\n 5     0     0     1   188 10              THC            -400         0\n 6   124     2    28    33 0.5             THC               0        30\n 7   123     3    22    39 1               THC               0        30\n 8   119     7    15    46 2               THC               0        30\n 9   106    20     4    57 5               THC               0        30\n10   101    25     0    61 10              THC               0        30\n# ℹ 40 more rows\n# ℹ 10 more variables: time_window <fct>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>, my_label <fct>\n```\n\n\n:::\n:::\n\n\n### OF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nof_levels <- c(\"pre-smoking\\nN=192\", \"0-30\\nmin\\nN=192\", \"31-90\\nmin\\nN=117\",\n               \"91-180\\nmin\\nN=99\", \"181-210\\nmin\\nN=102\", \"211-240\\nmin\\nN=83\",\n               \"241-270\\nmin\\nN=90\",  \"271+\\nmin\\nN=76\")\n\nplot_cutoffs(OF_THC, OF$timepoint_use, tissue = \"Oral Fluid\", labels = c(\"A\", \"B\"), vertline=levels(OF$timepoint_use)[4], cpd=\"THC\", x_labels=of_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-18-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n# A tibble: 40 × 18\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int> <fct>           <chr>         <dbl>     <dbl>\n 1     0     0    35   157 0.5             THC            -400         0\n 2     0     0    20   172 1               THC            -400         0\n 3     0     0     9   183 2               THC            -400         0\n 4     0     0     0   192 5               THC            -400         0\n 5     0     0     0   192 10              THC            -400         0\n 6   129     0    39    24 0.5             THC               0        30\n 7   129     0    30    33 1               THC               0        30\n 8   128     1    19    44 2               THC               0        30\n 9   128     1     3    60 5               THC               0        30\n10   125     4     1    62 10              THC               0        30\n# ℹ 30 more rows\n# ℹ 10 more variables: time_window <fct>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>, my_label <fct>\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Calculate: CBN\nReminder: Currently, states have laws on the books from zero tolerance (detection of any level) to 5ng/mL\n\n:::panel-tabset\n\n### WB\n\n\n::: {.cell}\n\n```{.r .cell-code}\nWB_CBN =  sens_spec_cpd(dataset = WB, cpd = 'cbn',\n                        timepoints = timepoints_WB,\n                        splits = cutoffs) %>% clean_gluc()\n\nblood_levels <- c(\"pre-smoking\\nN=189\", \"0-30\\nmin\\nN=187\", \"31-70\\nmin\\nN=165\",\n                  \"71-100\\nmin\\nN=157\", \"101-180\\nmin\\nN=168\", \"181-210\\nmin\\nN=103\",\n                  \"211-240\\nmin\\nN=127\", \"241-270\\nmin\\nN=137\", \"271-300\\nmin\\nN=120\",\n                  \"301+\\nmin\\nN=88\")\n\nplot_cutoffs(WB_CBN, WB$timepoint_use, tissue = \"Blood\", vertline=levels(WB$timepoint_use)[5], cpd=\"CBN\", x_labels=blood_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-19-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n# A tibble: 50 × 18\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int> <fct>           <chr>         <dbl>     <dbl>\n 1     0     0     1   188 0.5             CBN            -400         0\n 2     0     0     0   189 1               CBN            -400         0\n 3     0     0     0   189 2               CBN            -400         0\n 4     0     0     0   189 5               CBN            -400         0\n 5     0     0     0   189 10              CBN            -400         0\n 6   106    20     7    54 0.5             CBN               0        30\n 7    97    29     0    61 1               CBN               0        30\n 8    82    44     0    61 2               CBN               0        30\n 9    40    86     0    61 5               CBN               0        30\n10     9   117     0    61 10              CBN               0        30\n# ℹ 40 more rows\n# ℹ 10 more variables: time_window <fct>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>, my_label <fct>\n```\n\n\n:::\n:::\n\n\n### OF\n\n\n::: {.cell}\n\n```{.r .cell-code}\nOF_CBN =  sens_spec_cpd(dataset = OF, cpd = 'cbn',\n                        timepoints = timepoints_OF,\n                        splits = cutoffs) %>% clean_gluc()\n\nof_levels <- c(\"pre-smoking\\nN=192\", \"0-30\\nmin\\nN=192\", \"31-90\\nmin\\nN=117\",\n               \"91-180\\nmin\\nN=99\", \"181-210\\nmin\\nN=102\", \"211-240\\nmin\\nN=83\",\n               \"241-270\\nmin\\nN=90\",  \"271+\\nmin\\nN=76\")\n\nplot_cutoffs(OF_CBN, OF$timepoint_use, tissue = \"Oral Fluid\", labels = c(\"A\", \"B\"), vertline=levels(OF$timepoint_use)[4], cpd=\"CBN\", x_labels=of_levels)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[[1]]\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-20-1.png){width=2100}\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n[[2]]\n# A tibble: 40 × 18\n      TP    FN    FP    TN detection_limit compound time_start time_stop\n   <dbl> <dbl> <int> <int> <fct>           <chr>         <dbl>     <dbl>\n 1     0     0     5   187 0.5             CBN            -400         0\n 2     0     0     1   191 1               CBN            -400         0\n 3     0     0     1   191 2               CBN            -400         0\n 4     0     0     1   191 5               CBN            -400         0\n 5     0     0     0   192 10              CBN            -400         0\n 6   127     2    41    22 0.5             CBN               0        30\n 7   125     4    32    31 1               CBN               0        30\n 8   122     7    18    45 2               CBN               0        30\n 9   116    13     7    56 5               CBN               0        30\n10   107    22     3    60 10              CBN               0        30\n# ℹ 30 more rows\n# ℹ 10 more variables: time_window <fct>, NAs <int>, N <int>, N_removed <int>,\n#   Sensitivity <dbl>, Specificity <dbl>, PPV <dbl>, NPV <dbl>,\n#   Efficiency <dbl>, my_label <fct>\n```\n\n\n:::\n:::\n\n\n:::\n\n\n## Compound Correlations\n\n:::panel-tabset\n\n### Code\n\n::: {.cell}\n\n```{.r .cell-code}\nggplotRegression <- function (x, y, xlab, ylab, x_text, y_text,  y_text2, title) {\n  fit <- lm(y ~ x)\n  if(max(fit$model[,1],na.rm=TRUE)!=0){\n    ggplot(fit$model, aes_string(x = names(fit$model)[2], \n                                 y = names(fit$model)[1])) + \n      geom_point() +\n      stat_smooth(method = \"lm\", col = \"#B73239\", size = 1.5, se = FALSE) +\n      annotate(\"text\", x=x_text, y=y_text, \n               label = paste(\"R^2 == \", format(signif(summary(fit)$adj.r.squared, 5), \n                                               digits=2)),\n               vjust=1, hjust=0, parse=TRUE,size=4.5) +\n      labs(x = xlab, \n           y = ylab, \n           title = title ) +\n      annotate(\"text\", x=x_text, y=y_text2, label = paste(\n        \"y = \", format(signif(fit$coef[[2]], 5),digits=2),\n        \"x + \",\n        format(signif(fit$coef[[1]],5 ),digits=2),\n        paste0(\"\\nN = \", length(x))),\n        vjust=1, hjust=0, size=4.5) + \n      theme_minimal(base_size=14) +\n      theme(panel.grid = element_blank(),\n            axis.line = element_line(size = 0.5, linetype = \"solid\",\n                                     colour = \"black\"),\n            legend.position=\"none\") \n  } else{\n    ggplot(fit$model, aes_string(x = names(fit$model)[2], \n                                 y = names(fit$model)[1])) + \n      geom_point() +\n      scale_y_continuous(limits = c(0,3)) +\n      stat_smooth(method = \"lm\", col = \"#B73239\", size = 1.5, se = FALSE) +\n      annotate(\"text\", x=x_text, y=y_text, \n               label = paste(\"R^2 == \", format(signif(summary(fit)$adj.r.squared, 5), digits=2)),vjust=1, hjust=1, parse=TRUE,size=4.5) +\n      labs(x = xlab, \n           y = ylab, \n           title = title ) +\n      annotate(\"text\", x=x_text, y=y_text2, label = paste(\n        \"y = \", format(signif(fit$coef[[2]], 5),digits=2),\n        \"x + \",\n        format(signif(fit$coef[[1]],5 ),digits=2),\n        paste0(\"\\nN = \", length(x))), vjust=1, hjust=1,size=4.5) + \n      theme_minimal(base_size = 14) +\n      theme(panel.grid = element_blank(),\n            axis.line = element_line(size = 0.5, linetype = \"solid\",\n                                     colour = \"black\"),\n            legend.position=\"none\") \n    \n    \n  }\n}\n```\n:::\n\n\n### Plot\n\n::: {.cell}\n\n```{.r .cell-code}\nwb_reg <- ggplotRegression(WB$thc, WB$cbn, xlab = 'THC (ng/mL)', ylab = 'CBN  (ng/mL)', x_text= 150, y_text = 7, y_text2 = 5, title = \"Blood\")\n\nof_reg <- ggplotRegression(OF$thc, OF$cbn, xlab = 'THC  (ng/mL)', ylab = 'CBN  (ng/mL)', x_text= 12500, y_text = 750, y_text2 = 500, title = \"Oral Fluid\")\n\nplot_grid(wb_reg, of_reg, labels = 'AUTO', label_size = 12, ncol = 2, scale = 1)\n```\n\n::: {.cell-output-display}\n![](13-cs01-analysis_files/figure-html/unnamed-chunk-22-1.png){width=2100}\n:::\n:::\n\n\n:::\n\n## Possible Extensions\n\nOur current question asks for a *single* compound...and you'll need to decide that.\n\n. . . \n\n...but you could imagine a world where more than one compound or more than one matrix could be measured at the roadside.\n\n. . . \n\nSo:\n\n:::incremental\n- combination of the oral fluid and blood that would better predict recent use? (For example if an officer stopped a driver and got a high oral fluid, but could not get a blood sample for a couple of hours and got a relatively low result would this predict recent use better than blood (or OF) alone? \n- Is there a ratio of OF/blood that predicts recent use?\n- Machine learning model to determine optimal combination of measurements/cutoffs to detect recent use?\n:::\n\n. . . \n\nThings to keep in mind:\n\n- some matrices are easier to get at the roadside\n- time from use matters (trying to detect *recent* use)\n- we may not care equally about sensitivity and specificity\n\n## cs01: what to do now?\n\n1. Communicate with your group!\n2. Discuss possible extensions\n3. Make a plan; figure out who's doing what; set deadlines\n4. Implement the plan!\n\n\n## What has to be done:\n\n:::incremental\n- Question | include in Rmd; add extension if applicable\n- Background | summarize and add to what was discussed in classed\n- Data\n  - Describe data & variables\n  - Data wrangling | likely copy + paste from notes; add explanation as you go\n- Analysis\n  - EDA | likely borrowing parts from notes and adding more in; be sure to include interpretations of output & guide the reader\n  - Analysis | likely borrowing *most/all* from class; interpretations/guiding reader/contextualizing is essential\n  - Extension | must be completed\n- Conclusion | summarize\n- Proofread | ensure it makes sense from top to bottom\n- General Audience communication (submit on Canvas; 1 submission per group)\n:::\n\n## Collaborating on GitHub\n\n- Be sure to pull changes every time you sit down to work\n- Avoid working on the same part of the same file as another teammate OR work in separate files and combine at the end\n- push your changes once you're ready to add them to the group\n\n## Recap {.smaller background-color=\"#92A86A\"}\n\n- Can you describe sensitivity? Specificity?\n- Can you explain how TP, TN, FP, and FN were calculated/defined *in this experiment*?\n- Can you describe the code used to carry out the calculations?\n- Can you interpret the results from these data?\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.2/htmlwidgets.js\"></script>\n<link href=\"../../site_libs/datatables-css-0.0.0/datatables-crosstalk.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/datatables-binding-0.29/datatables.js\"></script>\n<script src=\"../../site_libs/jquery-3.6.0/jquery-3.6.0.min.js\"></script>\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/dt-core-1.13.4/css/jquery.dataTables.extra.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/dt-core-1.13.4/js/jquery.dataTables.min.js\"></script>\n<link href=\"../../site_libs/crosstalk-1.2.0/css/crosstalk.min.css\" rel=\"stylesheet\" />\n<script src=\"../../site_libs/crosstalk-1.2.0/js/crosstalk.min.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}