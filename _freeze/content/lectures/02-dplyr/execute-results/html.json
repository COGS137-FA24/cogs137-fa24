{
  "hash": "efc9a4613d7c30e0f8be9aaa3ca2320a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"02-dplyr\"\nauthor: \"Professor Shannon Ellis\"\ndate: \"2023-10-05\"\n\nformat:\n  html: \n    output-file: 02-dplyr.html\n    embed-resources: true\n    execute:\n      freeze: true\n  revealjs:\n    output-file: 02-dplyr-slides.html\n    slide-number: true\n    chalkboard: false \n    preview-links: auto\n    logo: images/cogs137-logo-hex.png\n    css: slides.css\n    footer: <https://cogs137.github.io/website/>\n    scrollable: true\n    embed-resources: true\n    execute:\n      echo: true\n      eval: true\n      freeze: true\n---\n\n\n# Data Manipulation with `dplyr` {background-color=\"#92A86A\"}\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n:::\n:::\n\n\n## Q&A {.scrollable .smaller}\n\n> Q: How many people are in a group for case studies and final project?\\\n> A: 3-4\n\n> Q: How to turn in assignments\\\n> A: We'll discuss this today!\n\n> Q: Why don't we have uniform keyboard-shortcut (like run code, new cell) for both R and Python and other coding environment?\\\n> A: Lack of communication? Preferences of developers? I think we'll get there...\n\n> Q: Wasn't clear about the 'single quotes' vs \"double quotes\" thing\\\n> A: When creating a string, or any time you need to use quotes in R, single and double quotes are interchangeable. R doesn't care which you use. However, your code will be stylistically better if you consistently use one.\n\n> Q: What are useful libraries that we can use to analyze data?\\\n> A: We'll be discussing lots, but the tidyverse packages (the first of which we'll discuss is dplyr) is a great place to start. There are also different packages for basically every statistical analysis out there\n\n> Q: Is there any way to prevent coercion? / I was wondering if you can types cast a variable when concatenation\\\n> A: Yup. You can explicitly state `as._____()` when creating a variable (i.e. `as.character()`) and when reading in data you can specify. You'll find that R does a pretty good job at guessing, but we can always fix to what we want after the fact.\n\n> Q: What is the difference between mylist\\[1\\] and mylist\\[\\[1\\]\\]? It looked like class(mylist\\[1\\]) returned list and class(mylist\\[\\[1\\]\\]) returned the class of the element.\\\n> A: Double brackets returns the element directly. Single bracket (for lists) always returns a list.\n\n> Q: I'm curious about how to handle dataframes in R\\\n> A: Excellent - we'll start this discussion today and continue throughout the quarter!\n\n## Course Announcements\n\n**Due Dates**:\n\n-   **Lab 01** due tomorrow (Friday; 11:59 PM)\n-   Student survey open until next Thursday\n-   **HW01** and **Lab02** will both be released Monday\n-   Lecture Participation survey \"due\" after class\n\n## Suggested Reading\n\nR4DS:\n\n-   Chapter 5: [Data Transformation](https://r4ds.had.co.nz/transform.html)\n-   Chapter 15: [Factors](https://r4ds.had.co.nz/factors.html)\n\n## Agenda\n\n-   `dplyr`\n    -   philosophy\n    -   pipes\n    -   common operations\n\n## Philosophy\n\n> `dplyr` is a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges\n\n::: aside\nSource: [dplyr.tidyverse.org](https://dplyr.tidyverse.org/)\n:::\n\n# Pipes {background-color=\"#92A86A\"}\n\n## The pipe in baseR\n\n<p align=\"center\">\n\n<img src=\"images/02/baseR_hex.jpeg\" width=\"300\" height=\"300\" align=\"center\"/>\n\n</p>\n\n-   `|>` should be read as \"and then\"\n-   for example \"Wake up \\|\\> brush teeth\" would be read as \"wake up *and then* brush teeth\"\n\n## Where does the name come from?\n\nThe pipe operator was *first* implemented in the package **magrittr**.\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/02/magritte.jpg)\n:::\n\n::: {.column width=\"50%\"}\n![](images/02/magrittr.jpg)\n:::\n:::\n\nYou will see this frequently in code online. It's equivalent to `|>`.\n\n## Review: How does a pipe work? {.scrollable}\n\n-   You can think about the following sequence of actions - find key, unlock car, start car, drive to school, park.\n\n. . .\n\n-   Expressed as a set of nested functions in R pseudocode this would look like:\n\n\n::: {.cell}\n\n```{.r .cell-code}\npark(drive(start_car(find(\"keys\")), to = \"campus\"))\n```\n:::\n\n\n. . .\n\n-   Writing it out using pipes give it a more natural (and easier to read) structure:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfind(\"keys\") |>\n  start_car() |>\n  drive(to = \"campus\") |>\n  park()\n```\n:::\n\n\n# Data {background-color=\"#92A86A\"}\n\nTo get started with lecture code: `library(tidyverse)`\n\n## NC DOT Fatal Crashes in North Carolina\n\nFrom OpenDurham's Data Portal\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike <- read_csv2(\"https://raw.githubusercontent.com/COGS137/datasets/main/nc_bike_crash.csv\", \n                  na = c(\"NA\", \"\", \".\"))\n```\n:::\n\n\n## Variables\n\nView the names of variables via\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"FID\"        \"OBJECTID\"   \"AmbulanceR\" \"BikeAge_Gr\" \"Bike_Age\"  \n [6] \"Bike_Alc_D\" \"Bike_Dir\"   \"Bike_Injur\" \"Bike_Pos\"   \"Bike_Race\" \n[11] \"Bike_Sex\"   \"City\"       \"County\"     \"CrashAlcoh\" \"CrashDay\"  \n[16] \"Crash_Date\" \"Crash_Grp\"  \"Crash_Hour\" \"Crash_Loc\"  \"Crash_Mont\"\n[21] \"Crash_Time\" \"Crash_Type\" \"Crash_Ty_1\" \"Crash_Year\" \"Crsh_Sevri\"\n[26] \"Developmen\" \"DrvrAge_Gr\" \"Drvr_Age\"   \"Drvr_Alc_D\" \"Drvr_EstSp\"\n[31] \"Drvr_Injur\" \"Drvr_Race\"  \"Drvr_Sex\"   \"Drvr_VehTy\" \"ExcsSpdInd\"\n[36] \"Hit_Run\"    \"Light_Cond\" \"Locality\"   \"Num_Lanes\"  \"Num_Units\" \n[41] \"Rd_Charact\" \"Rd_Class\"   \"Rd_Conditi\" \"Rd_Config\"  \"Rd_Defects\"\n[46] \"Rd_Feature\" \"Rd_Surface\" \"Region\"     \"Rural_Urba\" \"Speed_Limi\"\n[51] \"Traff_Cntr\" \"Weather\"    \"Workzone_I\" \"Location\"  \n```\n\n\n:::\n:::\n\n\n## Viewing your data\n\n-   In the Environment, click on the name of the data frame to view it in the data viewer (or use the `View` function)\n\n-   Use the `glimpse` function to take a peek\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 5,716\nColumns: 54\n$ FID        <dbl> 18, 29, 33, 35, 49, 53, 56, 60, 63, 66, 72, 75, 82, 84, 85,…\n$ OBJECTID   <dbl> 19, 30, 34, 36, 50, 54, 57, 61, 64, 67, 73, 76, 83, 85, 86,…\n$ AmbulanceR <chr> \"No\", \"Yes\", \"No\", \"Yes\", \"No\", \"Yes\", \"Yes\", \"No\", \"Yes\", …\n$ BikeAge_Gr <chr> NA, \"50-59\", NA, \"16-19\", NA, \"50-59\", \"16-19\", \"40-49\", \"1…\n$ Bike_Age   <dbl> 6, 51, 10, 17, 6, 52, 18, 40, 6, 7, 45, 30, 17, 20, 14, 15,…\n$ Bike_Alc_D <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n$ Bike_Dir   <chr> \"Not Applicable\", \"With Traffic\", \"With Traffic\", NA, \"Faci…\n$ Bike_Injur <chr> \"C: Possible Injury\", \"C: Possible Injury\", \"Injury\", \"B: E…\n$ Bike_Pos   <chr> \"Driveway / Alley\", \"Travel Lane\", \"Travel Lane\", \"Travel L…\n$ Bike_Race  <chr> \"Black\", \"Black\", \"Black\", \"White\", \"Black\", \"White\", \"Blac…\n$ Bike_Sex   <chr> \"Female\", \"Male\", \"Male\", \"Male\", \"Male\", \"Male\", \"Female\",…\n$ City       <chr> \"Durham\", \"Greenville\", \"Farmville\", \"Charlotte\", \"Charlott…\n$ County     <chr> \"Durham\", \"Pitt\", \"Pitt\", \"Mecklenburg\", \"Mecklenburg\", \"Du…\n$ CrashAlcoh <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n$ CrashDay   <chr> \"01-01-06\", \"01-01-02\", \"01-01-07\", \"01-01-05\", NA, NA, NA,…\n$ Crash_Date <date> 2007-01-06, 2007-01-09, 2007-01-14, 2007-01-12, 2007-01-15…\n$ Crash_Grp  <chr> \"Bicyclist Failed to Yield - Midblock\", \"Crossing Paths - O…\n$ Crash_Hour <dbl> 13, 23, 16, 19, 12, 20, 19, 14, 16, 0, 17, 18, 14, 17, 19, …\n$ Crash_Loc  <chr> \"Non-Intersection\", \"Intersection-Related\", \"Intersection\",…\n$ Crash_Mont <chr> NA, NA, NA, NA, NA, \"01-04-01\", \"01-04-01\", NA, \"01-02-01\",…\n$ Crash_Time <dttm> 0001-01-01 13:17:58, 0001-01-01 23:08:58, 0001-01-01 16:44…\n$ Crash_Type <chr> \"Bicyclist Ride Out - Residential Driveway\", \"Crossing Path…\n$ Crash_Ty_1 <dbl> 353311, 211180, 111144, 119139, 112114, 311231, 119144, 132…\n$ Crash_Year <dbl> 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007,…\n$ Crsh_Sevri <chr> \"C: Possible Injury\", \"C: Possible Injury\", \"O: No Injury\",…\n$ Developmen <chr> \"Residential\", \"Commercial\", \"Residential\", \"Residential\", …\n$ DrvrAge_Gr <chr> \"60-69\", \"30-39\", \"50-59\", \"30-39\", NA, \"20-24\", \"40-49\", N…\n$ Drvr_Age   <dbl> 66, 34, 52, 33, NA, 20, 40, NA, 17, 51, NA, 64, 50, 66, 30,…\n$ Drvr_Alc_D <chr> \"No\", \"No\", \"No\", \"No\", \"Missing\", \"No\", \"No\", \"Missing\", \"…\n$ Drvr_EstSp <chr> \"11-15 mph\", \"0-5 mph\", \"21-25 mph\", \"46-50 mph\", \"16-20 mp…\n$ Drvr_Injur <chr> \"O: No Injury\", \"O: No Injury\", \"O: No Injury\", \"O: No Inju…\n$ Drvr_Race  <chr> \"Black\", \"Black\", \"White\", \"White\", \"/Missing\", \"White\", \"B…\n$ Drvr_Sex   <chr> \"Male\", \"Male\", \"Female\", \"Female\", NA, \"Female\", \"Male\", N…\n$ Drvr_VehTy <chr> \"Pickup\", \"Passenger Car\", \"Passenger Car\", \"Sport Utility\"…\n$ ExcsSpdInd <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n$ Hit_Run    <chr> \"No\", \"No\", \"No\", \"No\", \"Yes\", \"No\", \"No\", \"Yes\", \"No\", \"No…\n$ Light_Cond <chr> \"Daylight\", \"Dark - Lighted Roadway\", \"Daylight\", \"Dark - R…\n$ Locality   <chr> \"Mixed (30% To 70% Developed)\", \"Urban (>70% Developed)\", \"…\n$ Num_Lanes  <chr> \"2 lanes\", \"5 lanes\", \"2 lanes\", \"4 lanes\", \"2 lanes\", \"4 l…\n$ Num_Units  <dbl> 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,…\n$ Rd_Charact <chr> \"Straight - Level\", \"Straight - Level\", \"Straight - Level\",…\n$ Rd_Class   <chr> \"Local Street\", \"Local Street\", \"Local Street\", \"NC Route\",…\n$ Rd_Conditi <chr> \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dry\", \"Dr…\n$ Rd_Config  <chr> \"Two-Way, Not Divided\", \"Two-Way, Divided, Unprotected Medi…\n$ Rd_Defects <chr> \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"None\", \"No…\n$ Rd_Feature <chr> \"No Special Feature\", \"Four-Way Intersection\", \"Four-Way In…\n$ Rd_Surface <chr> \"Smooth Asphalt\", \"Smooth Asphalt\", \"Smooth Asphalt\", \"Smoo…\n$ Region     <chr> \"Piedmont\", \"Coastal\", \"Coastal\", \"Piedmont\", \"Piedmont\", \"…\n$ Rural_Urba <chr> \"Urban\", \"Urban\", \"Rural\", \"Urban\", \"Urban\", \"Urban\", \"Urba…\n$ Speed_Limi <chr> \"20 - 25  MPH\", \"40 - 45  MPH\", \"30 - 35  MPH\", \"40 - 45  M…\n$ Traff_Cntr <chr> \"No Control Present\", \"Stop And Go Signal\", \"Stop Sign\", \"S…\n$ Weather    <chr> \"Clear\", \"Clear\", \"Clear\", \"Cloudy\", \"Clear\", \"Clear\", \"Cle…\n$ Workzone_I <chr> \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\", \"No\",…\n$ Location   <chr> \"36.002743, -78.8785\", \"35.612984, -77.39265\", \"35.595676, …\n```\n\n\n:::\n:::\n\n\n# `dplyr` {background-color=\"#92A86A\"}\n\n## A Grammar of Data Manipulation {.smaller .scrollable}\n\n**dplyr** is based on the concepts of functions as verbs that manipulate data frames.\n\nSingle data frame functions / verbs:\n\n-   `filter`: pick rows matching criteria\n-   `slice`: pick rows using index(es)\n-   `select`: pick columns by name\n-   `pull`: grab a column as a vector\n-   `rename`: rename specific columns\n-   `arrange`: reorder rows\n-   `mutate`: add new variables\n-   `transmute`: create new data frame with variables\n-   `distinct`: filter for unique rows\n-   `sample_n` / `sample_frac`: randomly sample rows\n-   `summarize`: reduce variables to values\n-   ... (many more)\n\n## **`dplyr`** rules for functions\n\n1.  First argument is *always* a data frame\n\n2.  Subsequent arguments say what to do with that data frame\n\n3.  Always return a data frame\n\n4.  Do not modify in place\n\n5.  Performance via lazy evaluation\n\n## Filter rows with `filter`\n\n-   Select a subset of rows in a data frame.\n-   Easily filter for many conditions at once.\n\n## `filter`\n\nfor crashes in Durham County\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  filter(County == \"Durham\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 253 × 54\n     FID OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir  Bike_Injur\n   <dbl>    <dbl> <chr>      <chr>         <dbl> <chr>      <chr>     <chr>     \n 1    18       19 No         <NA>              6 No         Not Appl… C: Possib…\n 2    53       54 Yes        50-59            52 No         With Tra… A: Disabl…\n 3    56       57 Yes        16-19            18 No         <NA>      C: Possib…\n 4   209      210 No         16-19            16 No         Facing T… C: Possib…\n 5   228      229 Yes        40-49            40 No         With Tra… B: Eviden…\n 6   620      621 Yes        50-59            55 No         With Tra… B: Eviden…\n 7   667      668 Yes        60-69            61 No         Not Appl… B: Eviden…\n 8   458      459 Yes        60-69            62 No         With Tra… B: Eviden…\n 9   576      577 No         40-49            49 No         With Tra… C: Possib…\n10   618      619 No         20-24            23 No         With Tra… C: Possib…\n# ℹ 243 more rows\n# ℹ 46 more variables: Bike_Pos <chr>, Bike_Race <chr>, Bike_Sex <chr>,\n#   City <chr>, County <chr>, CrashAlcoh <chr>, CrashDay <chr>,\n#   Crash_Date <date>, Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>,\n#   Crash_Mont <chr>, Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>,\n#   Crash_Year <dbl>, Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>,\n#   Drvr_Age <dbl>, Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>, …\n```\n\n\n:::\n:::\n\n\n## `filter`\n\nfor crashes in Durham County where biker was \\< 10 yrs old\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  filter(County == \"Durham\", Bike_Age < 10)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 20 × 54\n     FID OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir  Bike_Injur\n   <dbl>    <dbl> <chr>      <chr>         <dbl> <chr>      <chr>     <chr>     \n 1    18       19 No         <NA>              6 No         Not Appl… C: Possib…\n 2    47       48 No         10-Jun            9 No         Not Appl… O: No Inj…\n 3   124      125 Yes        10-Jun            8 No         With Tra… C: Possib…\n 4   531      532 Yes        10-Jun            7 No         With Tra… C: Possib…\n 5   704      705 Yes        10-Jun            9 No         Not Appl… C: Possib…\n 6    42       43 No         10-Jun            8 No         With Tra… O: No Inj…\n 7   392      393 Yes        0-5               2 No         Not Appl… B: Eviden…\n 8   941      942 No         10-Jun            9 No         With Tra… C: Possib…\n 9   436      437 Yes        10-Jun            6 No         Not Appl… O: No Inj…\n10   160      161 Yes        10-Jun            7 No         With Tra… C: Possib…\n11   273      274 Yes        10-Jun            7 No         Facing T… C: Possib…\n12    78       79 Yes        10-Jun            7 No         With Tra… C: Possib…\n13   422      423 No         10-Jun            9 No         Not Appl… O: No Inj…\n14   570      571 No         <NA>              0 Missing    Not Appl… Injury    \n15   683      684 Yes        10-Jun            8 No         Not Appl… C: Possib…\n16    62       63 Yes        10-Jun            7 No         With Tra… C: Possib…\n17   248      249 No         0-5               4 No         Not Appl… O: No Inj…\n18   306      307 Yes        10-Jun            8 No         With Tra… C: Possib…\n19   231      232 Yes        10-Jun            8 No         With Tra… C: Possib…\n20   361      362 Yes        10-Jun            9 No         With Tra… B: Eviden…\n# ℹ 46 more variables: Bike_Pos <chr>, Bike_Race <chr>, Bike_Sex <chr>,\n#   City <chr>, County <chr>, CrashAlcoh <chr>, CrashDay <chr>,\n#   Crash_Date <date>, Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>,\n#   Crash_Mont <chr>, Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>,\n#   Crash_Year <dbl>, Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>,\n#   Drvr_Age <dbl>, Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>,\n#   Drvr_Race <chr>, Drvr_Sex <chr>, Drvr_VehTy <chr>, ExcsSpdInd <chr>, …\n```\n\n\n:::\n:::\n\n\n## Aside: real data is messy! {.scrollable}\n\n[<i class=\"fa fa-user\" aria-hidden=\"true\"></i>   What in the world does a `BikeAge_gr` of `10-Jun` or `15-Nov` mean?]{style=\"background-color: #ADD8E6\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike |>\n  group_by(BikeAge_Gr) |>\n  summarize(crash_count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   BikeAge_Gr crash_count\n   <chr>            <int>\n 1 0-5                 60\n 2 10-Jun             421\n 3 15-Nov             747\n 4 16-19              605\n 5 20-24              680\n 6 25-29              430\n 7 30-39              658\n 8 40-49              920\n 9 50-59              739\n10 60-69              274\n11 70                  12\n12 70+                 58\n13 <NA>               112\n```\n\n\n:::\n:::\n\n\n## Careful data scientists clean up their data first!\n\n-   We're going to need to do some text parsing to clean up these data\n    -   `10-Jun` should be `6-10`\n    -   `15-Nov` should be `11-15`\n\n## Correct and overwrite `mutate` {.scrollable}\n\n-   Remember we want to do the following in the `BikeAge_Gr` variable\n    -   `10-Jun` should be `6-10`\n    -   `15-Nov` should be `11-15`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2,8|\"}\nbike <- bike |>\n  mutate(\n    BikeAge_Gr = case_when(\n      BikeAge_Gr == \"10-Jun\" ~ \"6-10\",\n      BikeAge_Gr == \"15-Nov\" ~ \"11-15\",\n      TRUE                   ~ BikeAge_Gr     # everything else\n    )\n  )\n```\n:::\n\n\n-   Note that we're overwriting existing data and columns, so be careful!\n    -   But remember, it's easy to revert if you make a mistake since we didn't touch the raw data, we can always reload it and start over\n\n## Check before you move on\n\nAlways check your changes and confirm code did what you wanted it to do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike |>\n  group_by(BikeAge_Gr) |>\n  summarize(count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   BikeAge_Gr count\n   <chr>      <int>\n 1 0-5           60\n 2 11-15        747\n 3 16-19        605\n 4 20-24        680\n 5 25-29        430\n 6 30-39        658\n 7 40-49        920\n 8 50-59        739\n 9 6-10         421\n10 60-69        274\n11 70            12\n12 70+           58\n13 <NA>         112\n```\n\n\n:::\n:::\n\n\n## `mutate` to add new variables\n\n[<i class=\"fa fa-user\" aria-hidden=\"true\"></i>   How is the new `alcohol` variable determined?]{style=\"background-color: #ADD8E6\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike |>\n  mutate(alcohol = case_when(\n    Bike_Alc_D == \"No\" & Drvr_Alc_D == \"No\"      ~ \"No\",\n    Bike_Alc_D == \"Yes\" | Drvr_Alc_D == \"Yes\"    ~ \"Yes\",\n    Bike_Alc_D == \"Missing\" & Drvr_Alc_D == \"No\" ~ \"Missing\",\n    Bike_Alc_D == \"No\" & Drvr_Alc_D == \"Missing\" ~ \"Missing\"\n  ))\n```\n:::\n\n\n## \"Save\" when you `mutate`\n\nMost often when you define a new variable with `mutate` you'll also want to save the resulting data frame, often by writing over the original data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike <- bike |>\n  mutate(alcohol = case_when(\n    Bike_Alc_D == \"No\" & Drvr_Alc_D == \"No\"      ~ \"No\",\n    Bike_Alc_D == \"Yes\" | Drvr_Alc_D == \"Yes\"    ~ \"Yes\",\n    Bike_Alc_D == \"Missing\" & Drvr_Alc_D == \"No\" ~ \"Missing\",\n    Bike_Alc_D == \"No\" & Drvr_Alc_D == \"Missing\" ~ \"Missing\"\n  ))\n```\n:::\n\n\n## `transmute` to create a new dataset\n\nYou'll use this much less often than `mutate` but when you need it, you need it.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |> \n  transmute(ID = paste(FID, OBJECTID, sep = \"-\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,716 × 1\n   ID   \n   <chr>\n 1 18-19\n 2 29-30\n 3 33-34\n 4 35-36\n 5 49-50\n 6 53-54\n 7 56-57\n 8 60-61\n 9 63-64\n10 66-67\n# ℹ 5,706 more rows\n```\n\n\n:::\n:::\n\n\n## `mutate` vs. `transmute`\n\n-   `mutate` adds new and keeps original\n-   `transmute` adds new; drops existing\n\n## Your Turn\n\nHow many accidents in our dataset required an ambulance ride (`AmbulanceR`) *and* had the `Crash_Type` \"Bicyclist Lost Control - Mechanical Problems\"?\n\n::: aside\nPut a <font color=\"#32cb31\">green</font> sticky on the front of your computer when you're done. Put a <font color=\"#ff65a3\">pink</font> if you want help/have a question.\n:::\n\n## `slice` for certain row numbers\n\nFirst five\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 54\n    FID OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir   Bike_Injur\n  <dbl>    <dbl> <chr>      <chr>         <dbl> <chr>      <chr>      <chr>     \n1    18       19 No         <NA>              6 No         Not Appli… C: Possib…\n2    29       30 Yes        50-59            51 No         With Traf… C: Possib…\n3    33       34 No         <NA>             10 No         With Traf… Injury    \n4    35       36 Yes        16-19            17 No         <NA>       B: Eviden…\n5    49       50 No         <NA>              6 No         Facing Tr… O: No Inj…\n# ℹ 46 more variables: Bike_Pos <chr>, Bike_Race <chr>, Bike_Sex <chr>,\n#   City <chr>, County <chr>, CrashAlcoh <chr>, CrashDay <chr>,\n#   Crash_Date <date>, Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>,\n#   Crash_Mont <chr>, Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>,\n#   Crash_Year <dbl>, Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>,\n#   Drvr_Age <dbl>, Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>,\n#   Drvr_Race <chr>, Drvr_Sex <chr>, Drvr_VehTy <chr>, ExcsSpdInd <chr>, …\n```\n\n\n:::\n:::\n\n\n## `slice` for certain row numbers\n\nLast five\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"1|3\"}\nlast_row <- nrow(bike)\nbike |>\n  slice((last_row - 4):last_row)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 54\n    FID OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir   Bike_Injur\n  <dbl>    <dbl> <chr>      <chr>         <dbl> <chr>      <chr>      <chr>     \n1   460      461 Yes        6-10              7 No         Not Appli… C: Possib…\n2   474      475 Yes        50-59            50 No         With Traf… B: Eviden…\n3   479      480 Yes        16-19            16 No         Not Appli… C: Possib…\n4   487      488 No         40-49            47 Yes        With Traf… C: Possib…\n5   488      489 Yes        30-39            35 No         Facing Tr… C: Possib…\n# ℹ 46 more variables: Bike_Pos <chr>, Bike_Race <chr>, Bike_Sex <chr>,\n#   City <chr>, County <chr>, CrashAlcoh <chr>, CrashDay <chr>,\n#   Crash_Date <date>, Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>,\n#   Crash_Mont <chr>, Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>,\n#   Crash_Year <dbl>, Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>,\n#   Drvr_Age <dbl>, Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>,\n#   Drvr_Race <chr>, Drvr_Sex <chr>, Drvr_VehTy <chr>, ExcsSpdInd <chr>, …\n```\n\n\n:::\n:::\n\n\n## `select` to keep only the variables you mention\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  select(Crash_Loc, Hit_Run) |>\n  table()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                      Hit_Run\nCrash_Loc                No  Yes\n  Intersection         2223  275\n  Intersection-Related  252   42\n  Location                3    7\n  Non-Intersection     2213  462\n  Non-Roadway           205   30\n```\n\n\n:::\n:::\n\n\n## or `select` to exclude variables\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  select(-OBJECTID)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,716 × 53\n     FID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir  Bike_Injur Bike_Pos\n   <dbl> <chr>      <chr>         <dbl> <chr>      <chr>     <chr>      <chr>   \n 1    18 No         <NA>              6 No         Not Appl… C: Possib… Drivewa…\n 2    29 Yes        50-59            51 No         With Tra… C: Possib… Travel …\n 3    33 No         <NA>             10 No         With Tra… Injury     Travel …\n 4    35 Yes        16-19            17 No         <NA>      B: Eviden… Travel …\n 5    49 No         <NA>              6 No         Facing T… O: No Inj… Travel …\n 6    53 Yes        50-59            52 No         With Tra… A: Disabl… Travel …\n 7    56 Yes        16-19            18 No         <NA>      C: Possib… Travel …\n 8    60 No         40-49            40 No         Facing T… B: Eviden… Sidewal…\n 9    63 Yes        6-10              6 No         Facing T… B: Eviden… Travel …\n10    66 Yes        6-10              7 No         <NA>      B: Eviden… Non-Roa…\n# ℹ 5,706 more rows\n# ℹ 45 more variables: Bike_Race <chr>, Bike_Sex <chr>, City <chr>,\n#   County <chr>, CrashAlcoh <chr>, CrashDay <chr>, Crash_Date <date>,\n#   Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>, Crash_Mont <chr>,\n#   Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>, Crash_Year <dbl>,\n#   Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>, Drvr_Age <dbl>,\n#   Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>, Drvr_Race <chr>, …\n```\n\n\n:::\n:::\n\n\n## or `select` a range of variables\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |>\n  select(OBJECTID:Bike_Injur)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5,716 × 7\n   OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir       Bike_Injur \n      <dbl> <chr>      <chr>         <dbl> <chr>      <chr>          <chr>      \n 1       19 No         <NA>              6 No         Not Applicable C: Possibl…\n 2       30 Yes        50-59            51 No         With Traffic   C: Possibl…\n 3       34 No         <NA>             10 No         With Traffic   Injury     \n 4       36 Yes        16-19            17 No         <NA>           B: Evident…\n 5       50 No         <NA>              6 No         Facing Traffic O: No Inju…\n 6       54 Yes        50-59            52 No         With Traffic   A: Disabli…\n 7       57 Yes        16-19            18 No         <NA>           C: Possibl…\n 8       61 No         40-49            40 No         Facing Traffic B: Evident…\n 9       64 Yes        6-10              6 No         Facing Traffic B: Evident…\n10       67 Yes        6-10              7 No         <NA>           B: Evident…\n# ℹ 5,706 more rows\n```\n\n\n:::\n:::\n\n\n## `pull` to extract a column as a vector\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nbike |>\n  slice(1:6) |>\n  pull(Location)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"36.002743, -78.8785\"  \"35.612984, -77.39265\" \"35.595676, -77.59074\"\n[4] \"35.076767, -80.7728\"  \"35.19999, -80.75713\"  \"35.966644, -78.96749\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nbike |>\n  slice(1:6) |>\n  select(Location)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 1\n  Location            \n  <chr>               \n1 36.002743, -78.8785 \n2 35.612984, -77.39265\n3 35.595676, -77.59074\n4 35.076767, -80.7728 \n5 35.19999, -80.75713 \n6 35.966644, -78.96749\n```\n\n\n:::\n:::\n\n\n## The two `pull`s in your lives {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/02/hex-dplyr.png)\n:::\n\n::: {.column width=\"50%\"}\n![](images/02/Octocat.png)\n:::\n:::\n\n-   Don't get `pull` happy when wrangling data! Only extract out variables if you truly need to, otherwise keep in data frame.\n\n-   But always ⬇️ `Pull` before starting your work when collaborating on GitHub.\n\n## `rename` specific columns\n\nUseful for correcting typos, and renaming to make variable names shorter and/or more informative\n\n-   Original names:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"FID\"        \"OBJECTID\"   \"AmbulanceR\" \"BikeAge_Gr\" \"Bike_Age\"  \n [6] \"Bike_Alc_D\" \"Bike_Dir\"   \"Bike_Injur\" \"Bike_Pos\"   \"Bike_Race\" \n[11] \"Bike_Sex\"   \"City\"       \"County\"     \"CrashAlcoh\" \"CrashDay\"  \n[16] \"Crash_Date\" \"Crash_Grp\"  \"Crash_Hour\" \"Crash_Loc\"  \"Crash_Mont\"\n[21] \"Crash_Time\" \"Crash_Type\" \"Crash_Ty_1\" \"Crash_Year\" \"Crsh_Sevri\"\n[26] \"Developmen\" \"DrvrAge_Gr\" \"Drvr_Age\"   \"Drvr_Alc_D\" \"Drvr_EstSp\"\n[31] \"Drvr_Injur\" \"Drvr_Race\"  \"Drvr_Sex\"   \"Drvr_VehTy\" \"ExcsSpdInd\"\n[36] \"Hit_Run\"    \"Light_Cond\" \"Locality\"   \"Num_Lanes\"  \"Num_Units\" \n[41] \"Rd_Charact\" \"Rd_Class\"   \"Rd_Conditi\" \"Rd_Config\"  \"Rd_Defects\"\n[46] \"Rd_Feature\" \"Rd_Surface\" \"Region\"     \"Rural_Urba\" \"Speed_Limi\"\n[51] \"Traff_Cntr\" \"Weather\"    \"Workzone_I\" \"Location\"  \n```\n\n\n:::\n:::\n\n\n## `rename` specific columns\n\n-   Rename `Speed_Limi` to `Speed_Limit`:\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike <- bike |>\n  rename(Speed_Limit = Speed_Limi)\n```\n:::\n\n\n## Check before you move on {.scrollable}\n\nAlways check your changes and confirm code did what you wanted it to do\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(bike)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"FID\"         \"OBJECTID\"    \"AmbulanceR\"  \"BikeAge_Gr\"  \"Bike_Age\"   \n [6] \"Bike_Alc_D\"  \"Bike_Dir\"    \"Bike_Injur\"  \"Bike_Pos\"    \"Bike_Race\"  \n[11] \"Bike_Sex\"    \"City\"        \"County\"      \"CrashAlcoh\"  \"CrashDay\"   \n[16] \"Crash_Date\"  \"Crash_Grp\"   \"Crash_Hour\"  \"Crash_Loc\"   \"Crash_Mont\" \n[21] \"Crash_Time\"  \"Crash_Type\"  \"Crash_Ty_1\"  \"Crash_Year\"  \"Crsh_Sevri\" \n[26] \"Developmen\"  \"DrvrAge_Gr\"  \"Drvr_Age\"    \"Drvr_Alc_D\"  \"Drvr_EstSp\" \n[31] \"Drvr_Injur\"  \"Drvr_Race\"   \"Drvr_Sex\"    \"Drvr_VehTy\"  \"ExcsSpdInd\" \n[36] \"Hit_Run\"     \"Light_Cond\"  \"Locality\"    \"Num_Lanes\"   \"Num_Units\"  \n[41] \"Rd_Charact\"  \"Rd_Class\"    \"Rd_Conditi\"  \"Rd_Config\"   \"Rd_Defects\" \n[46] \"Rd_Feature\"  \"Rd_Surface\"  \"Region\"      \"Rural_Urba\"  \"Speed_Limit\"\n[51] \"Traff_Cntr\"  \"Weather\"     \"Workzone_I\"  \"Location\"   \n```\n\n\n:::\n:::\n\n\n## Your Turn\n\nYour boss in Cumberland County gets overwhelmed by data easily, but he wants some data from you. He wants all bike accidents from his County, but he only wants to know the road's speed limit, the age of the biker, and to know if alcohol was involved. If you have time, mine as well make the column names very clear to your boss while you're at it...\n\n::: aside\nPut a <font color=\"#32cb31\">green</font> sticky on the front of your computer when you're done. Put a <font color=\"#ff65a3\">pink</font> if you want help/have a question.\n:::\n\n## `summarize` to reduce variables to values\n\nThe values are summarized in a data frame\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2-3\"}\nbike |>\n  group_by(BikeAge_Gr) |>\n  summarize(crash_count = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   BikeAge_Gr crash_count\n   <chr>            <int>\n 1 0-5                 60\n 2 11-15              747\n 3 16-19              605\n 4 20-24              680\n 5 25-29              430\n 6 30-39              658\n 7 40-49              920\n 8 50-59              739\n 9 6-10               421\n10 60-69              274\n11 70                  12\n12 70+                 58\n13 <NA>               112\n```\n\n\n:::\n:::\n\n\n## and `arrange` to order rows\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"4\"}\nbike |>\n  group_by(BikeAge_Gr) |>\n  summarize(crash_count = n()) |>\n  arrange(desc(crash_count))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   BikeAge_Gr crash_count\n   <chr>            <int>\n 1 40-49              920\n 2 11-15              747\n 3 50-59              739\n 4 20-24              680\n 5 30-39              658\n 6 16-19              605\n 7 25-29              430\n 8 6-10               421\n 9 60-69              274\n10 <NA>               112\n11 0-5                 60\n12 70+                 58\n13 70                  12\n```\n\n\n:::\n:::\n\n\n## `count` to group by then count\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbike |>\n  count(BikeAge_Gr)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 × 2\n   BikeAge_Gr     n\n   <chr>      <int>\n 1 0-5           60\n 2 11-15        747\n 3 16-19        605\n 4 20-24        680\n 5 25-29        430\n 6 30-39        658\n 7 40-49        920\n 8 50-59        739\n 9 6-10         421\n10 60-69        274\n11 70            12\n12 70+           58\n13 <NA>         112\n```\n\n\n:::\n:::\n\n\n[<i class=\"fa fa-user\" aria-hidden=\"true\"></i>   If you wanted to arrange these in ascending order what would you add to the pipe?]{style=\"background-color: #ADD8E6\"}\n\n## Select rows with `sample_n` or `sample_frac`\n\n-   `sample_n`: randomly sample 5 observations\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike_n5 <- bike |>\n  sample_n(5, replace = FALSE)\n\ndim(bike_n5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  5 54\n```\n\n\n:::\n:::\n\n\n-   `sample_frac`: randomly sample 20% of observations\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike_perc20 <- bike |>\n  sample_frac(0.2, replace = FALSE)\n\ndim(bike_perc20)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1143   54\n```\n\n\n:::\n:::\n\n\n## `distinct` to filter for unique rows\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"3\"}\nbike |> \n  select(County, City) |> \n  distinct() |> \n  arrange(County, City)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 360 × 2\n   County    City              \n   <chr>     <chr>             \n 1 Alamance  Alamance          \n 2 Alamance  Burlington        \n 3 Alamance  Elon College      \n 4 Alamance  Gibsonville       \n 5 Alamance  Graham            \n 6 Alamance  Green Level       \n 7 Alamance  Mebane            \n 8 Alamance  None - Rural Crash\n 9 Alexander None - Rural Crash\n10 Alleghany None - Rural Crash\n# ℹ 350 more rows\n```\n\n\n:::\n:::\n\n\n## `distinct` has a .keep_all parameter\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"2\"}\nbike |> \n  distinct(County, City, .keep_all = TRUE) |> \n  arrange(County, City)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 360 × 54\n     FID OBJECTID AmbulanceR BikeAge_Gr Bike_Age Bike_Alc_D Bike_Dir  Bike_Injur\n   <dbl>    <dbl> <chr>      <chr>         <dbl> <chr>      <chr>     <chr>     \n 1   524      525 Yes        11-15            12 No         <NA>      B: Eviden…\n 2    84       85 Yes        20-24            20 No         With Tra… B: Eviden…\n 3   571      572 Yes        16-19            16 No         Not Appl… B: Eviden…\n 4   509      510 Yes        40-49            43 Yes        With Tra… K: Killed \n 5   855      856 Yes        30-39            30 No         With Tra… A: Disabl…\n 6     5        6 Yes        40-49            44 Yes        With Tra… C: Possib…\n 7   163      164 Yes        30-39            35 No         Not Appl… C: Possib…\n 8    96       97 Yes        30-39            36 No         With Tra… C: Possib…\n 9    46       47 Yes        50-59            53 No         With Tra… B: Eviden…\n10   485      486 Yes        60-69            62 No         With Tra… C: Possib…\n# ℹ 350 more rows\n# ℹ 46 more variables: Bike_Pos <chr>, Bike_Race <chr>, Bike_Sex <chr>,\n#   City <chr>, County <chr>, CrashAlcoh <chr>, CrashDay <chr>,\n#   Crash_Date <date>, Crash_Grp <chr>, Crash_Hour <dbl>, Crash_Loc <chr>,\n#   Crash_Mont <chr>, Crash_Time <dttm>, Crash_Type <chr>, Crash_Ty_1 <dbl>,\n#   Crash_Year <dbl>, Crsh_Sevri <chr>, Developmen <chr>, DrvrAge_Gr <chr>,\n#   Drvr_Age <dbl>, Drvr_Alc_D <chr>, Drvr_EstSp <chr>, Drvr_Injur <chr>, …\n```\n\n\n:::\n:::\n\n\n# Factors {background-color=\"#92A86A\"}\n\n## Factors {.scrollable}\n\nFactor objects are how R stores data for categorical variables (fixed numbers of discrete values).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n(x = factor(c(\"BS\", \"MS\", \"PhD\", \"MS\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] BS  MS  PhD MS \nLevels: BS MS PhD\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 3 levels \"BS\",\"MS\",\"PhD\": 1 2 3 2\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n## Returning to: Cat lovers {.scrollable}\n\nReading in the cat-lovers data...\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers <- read_csv(\"https://raw.githubusercontent.com/COGS137/datasets/main/cat-lovers.csv\")\n```\n:::\n\n\n## Read data in as character strings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(cat_lovers)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 60\nColumns: 3\n$ name           <chr> \"Bernice Warren\", \"Woodrow Stone\", \"Willie Bass\", \"Tyro…\n$ number_of_cats <chr> \"0\", \"0\", \"1\", \"3\", \"3\", \"2\", \"1\", \"1\", \"0\", \"0\", \"0\", …\n$ handedness     <chr> \"left\", \"left\", \"left\", \"left\", \"left\", \"left\", \"left\",…\n```\n\n\n:::\n:::\n\n\n## But coerce when plotting {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cat_lovers, mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02-dplyr_files/figure-html/unnamed-chunk-35-1.png){width=2100}\n:::\n:::\n\n\n## Use `forcats` to manipulate factors {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncat_lovers <- cat_lovers |>\n  mutate(handedness = fct_relevel(handedness, \n                                  \"right\", \"left\", \"ambidextrous\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(cat_lovers, mapping = aes(x = handedness)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](02-dplyr_files/figure-html/unnamed-chunk-37-1.png){width=2100}\n:::\n:::\n\n\n## `forcats` functionality <img src=\"images/01/hex-forcats.png\" width=\"10%\" align=\"left\"/> {.scrollable}\n\n-   R uses factors to handle categorical variables, variables that have a fixed and known set of possible values. Historically, factors were much easier to work with than character vectors, so many base R functions automatically convert character vectors to factors.\n\n-   factors are still useful when you have true categorical data, and when you want to override the ordering of character vectors to improve display. The goal of the forcats package is to provide a suite of useful tools that solve common problems with factors.\n\n::: aside\nSource: [forcats.tidyverse.org](http://forcats.tidyverse.org/)\n:::\n\n# Recap {background-color=\"#92A86A\"}\n\n-   Understand the basic tenants of `dplyr`\n-   Describe and utilize the pipe in workflows\n-   Describe and use common `verbs` (functions)\n-   Understand the documentation for `dplyr` functions\n-   Understand what factors are an that `forcats` is a package with functionality for working with them\n",
    "supporting": [
      "02-dplyr_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/font-awesome-6.4.2/css/all.min.css\" rel=\"stylesheet\" />\n<link href=\"../../site_libs/font-awesome-6.4.2/css/v4-shims.min.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}